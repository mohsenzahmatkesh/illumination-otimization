function [intensity_map, X_grid, Y_grid] = IntensityMap(opt_angles, opt_radii, opt_I0, theta_c, led_height, gamma, x_tg, y_tg, resolution)
    % IntensityMap computes the intensity distribution inside the polygon.
    %
    % Inputs:
    %   opt_angles - LED angles (polar)
    %   opt_radii  - LED radii (polar)
    %   opt_I0     - Initial LED intensities
    %   theta_c    - Beam spread parameter
    %   led_height - Height of LEDs
    %   gamma      - Scaling factor
    %   x_tg, y_tg - Polygon vertices (target shape)
    %   resolution - Grid resolution (optional, default 200)
    %
    % Outputs:
    %   intensity_map - Matrix of intensities inside the polygon
    %   X_grid, Y_grid - Meshgrids for plotting

    if nargin < 10
        resolution = 200; % default resolution
    end
    
    % Create polygon object
    pgon = polyshape(x_tg, y_tg);
    
    % Get bounding box of the polygon to define the grid limits
    [x_bounds, y_bounds] = boundingbox(pgon);
    x_min = x_bounds(1);
    x_max = x_bounds(2);
    y_min = y_bounds(1);
    y_max = y_bounds(2);
    num_points = 100;
    % Create Cartesian grid over the bounding box
    [x_grid, y_grid] = randomPointsInPolygon(pgon, num_points);
    %[X_grid, Y_grid] = meshgrid(x_grid, y_grid);
    X_grid = reshape(x_grid,[sqrt(num_points) sqrt(num_points)]);
    Y_grid = reshape(y_grid,[sqrt(num_points) sqrt(num_points)]);
    % Initialize intensity map
    intensity_map = zeros(size(X_grid));
    
    % Create a logical mask for points inside the polygon

    in0 = isinterior(pgon, reshape(X_grid,[],1), reshape(Y_grid,[],1));
    in = reshape(in0,size(X_grid));
    
    % Loop over each LED and accumulate intensities at points inside the polygon
    for i = 1:length(opt_angles)
        % LED position (polar to Cartesian)
        [x_led, y_led] = pol2cart(opt_angles(i), opt_radii(i));
        
        % Compute distances from each grid point to LED
        dx = X_grid - x_led;
        dy = Y_grid - y_led;
        dz = -led_height;
        
        distance = sqrt(dx.^2 + dy.^2 + dz.^2);
        cos_theta = -dz ./ distance;
        
        % Clamp invalid values
        cos_theta(cos_theta < 0) = 0;
        
        theta = acos(cos_theta);
        
        % Compute intensity at each grid point from this LED
        I = gamma * opt_I0(i) * exp(-(theta/theta_c).^2) ./ (distance.^2);
        
        % Add to total intensity map, only inside the polygon
        intensity_map = intensity_map + I .* in;
    end
end
